# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Golang CGO cross compiler
      # You may pin to the exact commit or the version.
      # uses: crazy-max/ghaction-xgo@682253ce1d3dd7a78c5120c703c9f3811dbf8cb2
      uses: crazy-max/ghaction-xgo@v3.0.0
      with:
        # xgo version
        #xgo_version: # optional, default is latest
        # Go release to use for cross compilation
        #go_version: # optional, default is latest
        # Destination folder to put binaries in
        #dest: # optional, default is build
        # Sub-package to build if not root import
        #pkg: # optional
        # Prefix to use for output naming. Default to package name
        prefix: alist-cli
        # Comma separated targets to build for. Example: windows/amd64,linux/386
        #targets: # optional, default is */*
        # Prints the names of packages as they are compiled
        v: true
        # Prints the build commands as compilation progresses
        x: true
        # Enable data race detection (supported only on amd64)
        #race: # optional, default is false
        # Comma separated list of build tags to consider satisfied during the build
        #tags: # optional
        # Arguments to pass on each go tool link invocation
        #ldflags: # optional
        # Indicates which kind of object file to build
        #buildmode: # optional, default is default
        # Whether to stamp binaries with version control information
        #buildvcs: # optional
        # Remove all file system paths from the resulting executable
        #trimpath: # optional, default is false
        # Working directory
        #working_dir: # optional
          
